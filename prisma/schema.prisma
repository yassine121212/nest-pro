// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  email         String     @unique
  hash          String
  firstName     String?
  lastName      String?
  userName      String?     @unique
  phone         String? 
  address       String? 
  birthday      String? 
  city          String? 
  isverified    Boolean?   @default(false)
  picture       String? 
  followings    String[]
  followers     String[]
  wrritenPosts  Post[]     @relation("wrritnPosts")
  favoritePosts Post[]     @relation("favoritePosts")
  skills        Skills[]
  service       Service[]
  Messages      Messages[]

  @@unique([email, userName])
  @@map("users")
}

model Post {
  id            String   @id @default(uuid())
  title         String
  user          User     @relation("wrritnPosts", fields: [userId], references: [id])
  userId        String
  favoritedBy   User?    @relation("favoritePosts", fields: [favoritedById], references: [id])
  favoritedById String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("posts")
}

model Skills {
  id        String   @id @default(uuid())
  name      String
  value     Int
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

model Service {
  id          String  @id @default(uuid())
  name        String
  description String?
  User        User    @relation(fields: [userId], references: [id])
  userId      String

  @@map("services")
}

model Conversation {
  id        String     @id @default(uuid())
  text      String
  members   String[]
  messages  Messages[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt

  @@map("conversations")
}

model Messages {
  id             String        @id @default(uuid())
  text           String
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?

  @@map("messages")
}
